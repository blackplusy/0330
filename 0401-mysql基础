1.基础命令
	show databases;
	select database();
	use 数据库;
	show tables;
2.表结构
	create table 表(
		列 数据类型,
		列 数据类型
		。。。
	);
	alter
	drop
3.约束
	唯一
	主键
	非空
	检查
	外键
4.SQL分类
	DDL
	DML
	DCL
	DQL
5.DML语句
	insert
	delete
	update
6.简单查询
	where 条件
	1>比较
	2>关系
	3>区间
	4>空
	5>模糊查询
	6>in
======================================
1.多表查询
当一张表无法满足条件的时候使用多表查询
a.笛卡尔积
	两张表不做任何关联产生的数据，无效数据增加，数据量成倍增加
	所以引入内联查询、左联查询、右联查询
	https://blog.csdn.net/weixin_37678117/article/details/81192245
	select * from ecs_goods;
	select * from ecs_category;
	select * from ecs_goods,ecs_category;
b.内联查询
	语法:
	select 列 from 表1,表2 where 表1.列=表2.列;
	select 列 from 表1 inner join 表2 on 表1.列=表2.列;
	关联的列判断
		1.名字相同
		2.作用相同
		3.主外键关系
	需求:查询商品名称是KD876的分类名称
		1.分析列
			商品名称
			分类名称
		2.分析表
			商品名称(ecs_goods)
			分类名称(ecs_category)
		3.关联
			select * from ecs_goods ,ecs_category 
			where ecs_goods.cat_id=ecs_category.cat_id;
		4.过滤
			select cat_name from ecs_goods ,ecs_category 
			where ecs_goods.cat_id=ecs_category.cat_id
			and goods_name='KD876';
	需求:查询分类名称是3G手机的所有商品名称
		1.分析列
			分类名称
			商品名称
		2.分析表
			商品名称(ecs_goods)
			分类名称(ecs_category)
		3.关联
			select * from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id;
		4.过滤
			select g.goods_name from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and c.cat_name='3G手机';			
#练习1:查询分类名称是3G手机或者服装的商品名称有哪些
	1.  分类名称  商品名称
	2.  ecs_category  ecs_goods
	3.  select * from ecs_goods g1,ecs_category c1
			where g1.cat_id=c1.cat_id
	4.  select * from ecs_goods g1,ecs_category c1
			where g1.cat_id=c1.cat_id
			and c1.cat_name in ('3G手机','服装');
	
#练习2：查询商品本店售价范围在2000和3000之间所有的商品的分类名称 
	select c1.cat_name from ecs_goods g1,ecs_category c1
			where g1.cat_id=c1.cat_id
			and g1.shop_price between 2000 and 3000;

	--1.jpg
	1.select * from test1 where department='计算机系'
		and place='北京';
	2.update test1 set department='信息学院'
		where department='计算机系';
	3.select t1.no,t1.name,t2.grade,t2.courses  from test1 t1,test2 t2
	    where t1.no=t2.no
	    and t2.grade>=75;

	--2.jpg
	1.  select s.name from student s,achievement a
		where s.id=a.id
		and a.mark>85;
	2.select count(*) from achievement where mark>=90;
	3.insert into achievement values(7,80);
	4.update achievement set mark=87 where id=3;
	5.
		delete from student where name='Betty';
		delete from achievement where id=6;

2.导入sakila数据库
	1.下载sakila压缩包
	2.解压sakila压缩包
	3.进入到已经解压好的文件夹(命令提示符)
	4.登陆mysql
		mysql -u root -p
	5.导入sakila-schema.sql
		source sakila-schema.sql;
	6.导入sakila-data.sql
		source sakila-data.sql;

3.子查询
	一条SQL语句的执行结果依赖于另外一条SQL语句的执行结果
	需求:查询商品名称是KD876的分类名称
		1.分析列
			商品名称
			分类名称
		2.分析表
			ecs_goods
			ecs_cateogry
		3.关联列
			cat_id
		4.
			查询出ecs_goods表中满足条件的cat_id
				select cat_id from ecs_goods where goods_name='KD876';
			查询出ecs_category表中cat_id为上面查询出来结果的分类名称
				select cat_name from ecs_category 
				where cat_id=(select cat_id from ecs_goods where goods_name='KD876');
	子查询可以用于数据的新增，修改和删除和查询
	--3.jpg
		3.insert into achievement values((select id from student where name='Robert'),80);
		4.update achievement set mark=87 where id=(select id from student where name='Rose');
		5.delete from achievement where id=(select id from student where name='Betty');
		  delete from student where name='Betty';
	子查询分为单行子查询和多行子查询
		单行子查询：查询子句的结果是一个，可以用=或者in
		多行子查询：查询子句的结果是多个，用in
	需求:
		查询本店售价范围在1000和3000之间的所有商品分类名称
		1.查询ecs_goods表中满足条件的cat_id
			select cat_id from ecs_goods where shop_price between 1000 and 3000;
		2.查询ecs_category表中cat_id为上面查询出来结果的分类名称		
			select cat_name from ecs_category where cat_id=(select cat_id from ecs_goods where shop_price between 1000 and 3000);
	--7.jpg
		1.
		查询c表中满足条件的c#
			select c# from c where cn='税收基础';
		查询sc表中c#为上面查询出来的s#
			select s# from sc where c# in (select c# from c where cn='税收基础');
		查询s表中s#为上面查询出来的学号和名字
			select s#,sn from s where s# in (select s# from sc where c# in (select c# from c where cn='税收基础'));
		2.
		查询sc表中满足条件的s#
			select s# from sc where c#='C2';
		查询s表中满足s#为上面查询出来的sn和sd
			select sn,sd from s where s# in (select s# from sc where c#='C2')
		3.
			select sn,sd from s where s# in (select s# from sc where c#!='C5')




